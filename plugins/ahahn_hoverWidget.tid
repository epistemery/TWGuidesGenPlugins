author: Andreas Hahn
created: 20140917175623545
creator: Andreas Hahn
dependents: 
description: Adds a hover widget.
list: readme
modified: 20140917175623545
modifier: Andreas Hahn
plugin-type: plugin
revision: 0
title: $:/plugins/ahahn/hoverWidget
type: application/json
version: 0.1.0

{
    "tiddlers": {
        "$:/plugins/ahahn/hoverWidget/hoverWidget.js": {
            "text": "/*\\\ntitle: $:/plugins/ahahn/hoverWidget/hoverWidget.js\ntype: application/javascript\nmodule-type: widget\n\nHover widget\n\n\\*/\n(function(){\n\n/*jslint node: true, browser: true */\n/*global $tw: false */\n\"use strict\";\n\nvar Button = require(\"$:/core/modules/widgets/button.js\").button;\n\nvar HoverWidget = function(parseTreeNode,options) {\n\tthis.initialise(parseTreeNode,options);\n\tthis.mouseInside = false;\n};\n\n/*\nInherit from the base widget class\n*/\nHoverWidget.prototype = new Button();\n\n/*\nRender this widget into the DOM\n*/\nHoverWidget.prototype.render = function(parent,nextSibling) {\n\tvar self = this;\n\t// Remember parent\n\tthis.parentDomNode = parent;\n\t// Compute attributes and execute state\n\tthis.computeAttributes();\n\tthis.execute();\n\t// Create element\n\tvar domNode = this.document.createElement(\"span\");\n\t// Assign classes\n\tvar classes = this[\"class\"].split(\" \") || [];\n\t// Assign hover class\n\tclasses.unshift(\"tc-hoverzone\");\n\tif(this.selectedClass) {\n\t\tif(this.set && this.setTo && this.isSelected()) {\n\t\t\t$tw.utils.pushTop(classes,this.selectedClass.split(\" \"));\n\t\t}\n\t\tif(this.popup && this.isPoppedUp()) {\n\t\t\t$tw.utils.pushTop(classes,this.selectedClass.split(\" \"));\n\t\t}\n\t}\n\tdomNode.className = classes.join(\" \");\n\t// Assign other attributes\n\tif(this.style) {\n\t\tdomNode.setAttribute(\"style\",this.style);\n\t}\n\t// In HTML5 this is valid, but might not be useful\n\tif(this.title) {\n\t\tdomNode.setAttribute(\"title\",this.title);\n\t}\n\tif(this[\"aria-label\"]) {\n\t\tdomNode.setAttribute(\"aria-label\",this[\"aria-label\"]);\n\t}\n\t// Add a click or mouse event handlers\n\t$tw.utils.addEventListeners(domNode, [{name: \"mouseenter\", handlerObject: this}]);\n\t$tw.utils.addEventListeners(domNode, [{name: \"mouseleave\", handlerObject: this}]);\n\t// Insert element\n\tparent.insertBefore(domNode,nextSibling);\n\tthis.renderChildren(domNode,null);\n\tthis.domNodes.push(domNode);\n};\n\n/*\nCompute the internal stat√© of the widget\n*/\nHoverWidget.prototype.execute = function() {\n\t// Get new attributes\n\tthis.on = this.getAttribute(\"on\", \"hover\");\n\t// Call the parent method\n\tButton.prototype.execute.call(this);\n}\n\n/*\nSelectively refreshes the widget if needed. Returns true if the widget or any of its children needed re-rendering\n*/\nHoverWidget.prototype.refresh = function(changedTiddlers) {\n\tvar changedAttributes = this.computeAttributes();\n\tif(changedAttributes.on) {\n\t\tthis.refreshSelf();\n\t\treturn true;\n\t}\n\treturn Button.prototype.refresh.call(this,changedTiddlers);\n};\n\n/*\nHandler for mouse events\n*/\nHoverWidget.prototype.handleEvent = function (event) {\n\tvar self = this;\n\tvar handled = false;\n\tswitch (event.type) {\n\t\tcase \"mouseenter\":\n\t\t\tif (self.mouseInside == false) {\n\t\t\t\tself.mouseInside = !self.mouseInside;\n\t\t\t\tif(self.on !== \"mouseout\") {\n\t\t\t\t\thandled = self.triggerActions(event);\n\t\t\t\t}\n\t\t\t}\n\t\t\tbreak;\n\t\tcase \"mouseleave\":\n\t\t\t//Trigger popup again (to close)\n\t\t\t//Other actions are not triggered again\n\t\t\tif (self.mouseInside == true) {\n\t\t\t\tself.mouseInside = !self.mouseInside;\n\t\t\t\tif(self.on === \"mouseout\") {\n\t\t\t\t\thandled = self.triggerActions(event);\n\t\t\t\t} else if(self.on !== \"mousein\") {\n\t\t\t\t\tif (self.popup) {\n\t\t\t\t\t\tself.triggerPopup(event);\n\t\t\t\t\t\thandled = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tbreak;\n\t\tdefault:\n\t\t\t// Don't handle other events.\n\t}\n\tif(handled) {\n\t\tevent.preventDefault();\n\t\tevent.stopPropagation();\n\t}\n\t// This is expected to be a void function, thus nothing to return\n}\n\n/*\nTrigger the configured actions\n*/\nHoverWidget.prototype.triggerActions = function(event) {\n\tvar self = this;\n\tvar handled = false;\n\tif(self.to) {\n\t\tself.navigateTo(event);\n\t\thandled = true;\n\t}\n\tif(self.message) {\n\t\tself.dispatchMessage(event);\n\t\thandled = true;\n\t}\n\tif(self.popup) {\n\t\tself.triggerPopup(event);\n\t\thandled = true;\n\t}\n\tif(self.set) {\n\t\tself.setTiddler();\n\t\thandled = true;\n\t}\n\treturn handled;\n}\n\nexports.hover = HoverWidget;\n\n})();\n",
            "title": "$:/plugins/ahahn/hoverWidget/hoverWidget.js",
            "type": "application/javascript",
            "module-type": "widget"
        },
        "$:/plugins/ahahn/hoverWidget/readme": {
            "title": "$:/plugins/ahahn/hoverWidget/readme",
            "text": "!Introduction\r\nThis plugin adds a `<$hover>` widget which behaves excactly like the `<$button>` widget, except that it\r\ntriggers the action when hovered over.\n\nTherefore it can perform the following actions:\n\n* Navigate to a specified tiddler\r\n* Dispatch a user defined [[widget message|WidgetMessages]]\r\n* Trigger a user defined [[popup|PopupMechanism]]\r\n* Assign new text to a specified tiddler\n\nAdditionally one can specify the mouse event for which the actions are triggered.\n\n! Content and Attributes\n\nThe content of the `<$hover>` widget is displayed within the button.\n\n|!Attribute |!Description |\r\n|to |The title of the tiddler to navigate to |\r\n|message |The name of the [[widget message|WidgetMessages]] to send when the element is hovered |\r\n|param |The optional parameter to the message |\r\n|set |A TextReference to which a new value will be assigned |\r\n|setTo |The new value to assign to the TextReference identified in the `set` attribute |\r\n|popup |Title of a state tiddler for a popup that is toggled when the element is hovered |\r\n|aria-label |Optional [[Accessibility]] label |\r\n|title |Optional tooltip |\r\n|class |An optional CSS class name to be assigned to the HTML element |\r\n|style |An optional CSS style attribute to be assigned to the HTML element |\r\n|selectedClass |An optional additional CSS class to be assigned if the popup is triggered or the tiddler specified in `set` already has the value specified in `setTo`  |\r\n|default |Default value if `set` tiddler is missing for testing against `setTo` to determine `selectedClass` |\r\n|on |One of `hover`, `mousein`, `mouseout`. Defaults to `hover`. Specifies when the actions are triggered, `hover` ensures a symmetric popup action. |\r\n"
        }
    }
}